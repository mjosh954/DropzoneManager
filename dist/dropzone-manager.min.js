var DropzoneManager=function(){"use strict";function e(r){return this instanceof e?(this.self=this,this.dropzones={},void(r&&r.forEach(function(e){this.self.register(e)}))):new e(r)}function r(){}function o(e,r){return"undefined"===e[r]}return e.prototype.register=function(e,o){return r(e),this.dropzones[e.options.id]=e,o&&"function"==typeof o?o(e):void 0},e.prototype.processAll=function(e){if(!this.hasRegisteredDropzones())return e(new Error("Manager has no dropzones registered"));var r=Object.keys(this.dropzones);return r.forEach(function(e){this.processById(e)}),e&&"function"==typeof e?e():void 0},e.prototype.processById=function(e,r){if(!this.hasRegisteredDropzones())return r(new Error("Manager has no dropzones registered"));if(!o(this.dropzones,e))return r(new Error('"'+e+'" is not a registered Dropzone'));var n=this.dropzones[e];return n.processQueue(),r&&"function"==typeof r?r(null,n):n},e.prototype.removeById=function(e,r){if(!this.hasRegisteredDropzones())return r(new Error("Manager has no dropzones registered"),null);if(o(this.dropzones,e))return r(new Error('"'+e+'" is not a registered Dropzone'));var n=this.dropzones[e];return delete this.dropzones[e],r&&"function"==typeof r?r(null,n):n},e.prototype.unregisterAll=function(e){if(this.hasRegisteredDropzones()){var r=JSON.parse(JSON.stringify(this.dropzones));if(this.dropzones={},e&&"function"==typeof e)return e(r)}return e(null)},e.prototype.hasAnyQueuedFiles=function(){var e=!1;if(this.hasRegisteredDropzones()){var r=Object.keys(this.dropzones);r.forEach(function(r){o(r)&&this.dropzones[r].files.forEach(function(r){return"queued"===r.status?void(e=!0):void 0}),e})}return e},e.prototype.hasRegisteredDropzones=function(){return Object.keys(this.dropzones).length>0},e.createDropzone=function(e,r){var o=new Dropzone(e,r);return o},e}();
//# sourceMappingURL=data:application/json;base64,